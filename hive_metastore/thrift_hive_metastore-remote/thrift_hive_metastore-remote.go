// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/robotblake/pdsm-go/fb303"
	"github.com/robotblake/pdsm-go/hive_metastore"
)

var _ = fb303.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
	fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys)")
	fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
	fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
	fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
	fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
	fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
	fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
	fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
	fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
	fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
	fmt.Fprintln(os.Stderr, "   get_master_keys()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
	fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
	fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void flushCache()")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "  string getVersion()")
	fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
	fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
	fmt.Fprintln(os.Stderr, "   getCounters()")
	fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
	fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
	fmt.Fprintln(os.Stderr, "  string getOption(string key)")
	fmt.Fprintln(os.Stderr, "   getOptions()")
	fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void reinitialize()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getMetaConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMetaConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setMetaConf":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg477 := flag.Arg(1)
		mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
		defer mbTrans478.Close()
		_, err479 := mbTrans478.WriteString(arg477)
		if err479 != nil {
			Usage()
			return
		}
		factory480 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt481 := factory480.GetProtocol(mbTrans478)
		argvalue0 := hive_metastore.NewDatabase()
		err482 := argvalue0.Read(jsProt481)
		if err482 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases(context.Background()))
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg489 := flag.Arg(2)
		mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
		defer mbTrans490.Close()
		_, err491 := mbTrans490.WriteString(arg489)
		if err491 != nil {
			Usage()
			return
		}
		factory492 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt493 := factory492.GetProtocol(mbTrans490)
		argvalue1 := hive_metastore.NewDatabase()
		err494 := argvalue1.Read(jsProt493)
		if err494 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg496 := flag.Arg(1)
		mbTrans497 := thrift.NewTMemoryBufferLen(len(arg496))
		defer mbTrans497.Close()
		_, err498 := mbTrans497.WriteString(arg496)
		if err498 != nil {
			Usage()
			return
		}
		factory499 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt500 := factory499.GetProtocol(mbTrans497)
		argvalue0 := hive_metastore.NewType()
		err501 := argvalue0.Read(jsProt500)
		if err501 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_fields_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg508 := flag.Arg(3)
		mbTrans509 := thrift.NewTMemoryBufferLen(len(arg508))
		defer mbTrans509.Close()
		_, err510 := mbTrans509.WriteString(arg508)
		if err510 != nil {
			Usage()
			return
		}
		factory511 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt512 := factory511.GetProtocol(mbTrans509)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err513 := argvalue2.Read(jsProt512)
		if err513 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg518 := flag.Arg(3)
		mbTrans519 := thrift.NewTMemoryBufferLen(len(arg518))
		defer mbTrans519.Close()
		_, err520 := mbTrans519.WriteString(arg518)
		if err520 != nil {
			Usage()
			return
		}
		factory521 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt522 := factory521.GetProtocol(mbTrans519)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err523 := argvalue2.Read(jsProt522)
		if err523 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg524 := flag.Arg(1)
		mbTrans525 := thrift.NewTMemoryBufferLen(len(arg524))
		defer mbTrans525.Close()
		_, err526 := mbTrans525.WriteString(arg524)
		if err526 != nil {
			Usage()
			return
		}
		factory527 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt528 := factory527.GetProtocol(mbTrans525)
		argvalue0 := hive_metastore.NewTable()
		err529 := argvalue0.Read(jsProt528)
		if err529 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg530 := flag.Arg(1)
		mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
		defer mbTrans531.Close()
		_, err532 := mbTrans531.WriteString(arg530)
		if err532 != nil {
			Usage()
			return
		}
		factory533 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt534 := factory533.GetProtocol(mbTrans531)
		argvalue0 := hive_metastore.NewTable()
		err535 := argvalue0.Read(jsProt534)
		if err535 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg536 := flag.Arg(2)
		mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
		defer mbTrans537.Close()
		_, err538 := mbTrans537.WriteString(arg536)
		if err538 != nil {
			Usage()
			return
		}
		factory539 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt540 := factory539.GetProtocol(mbTrans537)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err541 := argvalue1.Read(jsProt540)
		if err541 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_table_with_constraints":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 3 args")
			flag.Usage()
		}
		arg542 := flag.Arg(1)
		mbTrans543 := thrift.NewTMemoryBufferLen(len(arg542))
		defer mbTrans543.Close()
		_, err544 := mbTrans543.WriteString(arg542)
		if err544 != nil {
			Usage()
			return
		}
		factory545 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt546 := factory545.GetProtocol(mbTrans543)
		argvalue0 := hive_metastore.NewTable()
		err547 := argvalue0.Read(jsProt546)
		if err547 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg548 := flag.Arg(2)
		mbTrans549 := thrift.NewTMemoryBufferLen(len(arg548))
		defer mbTrans549.Close()
		_, err550 := mbTrans549.WriteString(arg548)
		if err550 != nil {
			Usage()
			return
		}
		factory551 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt552 := factory551.GetProtocol(mbTrans549)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err553 := containerStruct1.ReadField2(jsProt552)
		if err553 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.PrimaryKeys
		value1 := argvalue1
		arg554 := flag.Arg(3)
		mbTrans555 := thrift.NewTMemoryBufferLen(len(arg554))
		defer mbTrans555.Close()
		_, err556 := mbTrans555.WriteString(arg554)
		if err556 != nil {
			Usage()
			return
		}
		factory557 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt558 := factory557.GetProtocol(mbTrans555)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err559 := containerStruct2.ReadField3(jsProt558)
		if err559 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ForeignKeys
		value2 := argvalue2
		fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
			flag.Usage()
		}
		arg560 := flag.Arg(1)
		mbTrans561 := thrift.NewTMemoryBufferLen(len(arg560))
		defer mbTrans561.Close()
		_, err562 := mbTrans561.WriteString(arg560)
		if err562 != nil {
			Usage()
			return
		}
		factory563 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt564 := factory563.GetProtocol(mbTrans561)
		argvalue0 := hive_metastore.NewDropConstraintRequest()
		err565 := argvalue0.Read(jsProt564)
		if err565 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_primary_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
			flag.Usage()
		}
		arg566 := flag.Arg(1)
		mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
		defer mbTrans567.Close()
		_, err568 := mbTrans567.WriteString(arg566)
		if err568 != nil {
			Usage()
			return
		}
		factory569 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt570 := factory569.GetProtocol(mbTrans567)
		argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
		err571 := argvalue0.Read(jsProt570)
		if err571 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPrimaryKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_foreign_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
			flag.Usage()
		}
		arg572 := flag.Arg(1)
		mbTrans573 := thrift.NewTMemoryBufferLen(len(arg572))
		defer mbTrans573.Close()
		_, err574 := mbTrans573.WriteString(arg572)
		if err574 != nil {
			Usage()
			return
		}
		factory575 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt576 := factory575.GetProtocol(mbTrans573)
		argvalue0 := hive_metastore.NewAddForeignKeyRequest()
		err577 := argvalue0.Read(jsProt576)
		if err577 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddForeignKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg584 := flag.Arg(4)
		mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
		defer mbTrans585.Close()
		_, err586 := mbTrans585.WriteString(arg584)
		if err586 != nil {
			Usage()
			return
		}
		factory587 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt588 := factory587.GetProtocol(mbTrans585)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err589 := argvalue3.Read(jsProt588)
		if err589 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_by_type":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_table_meta":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg597 := flag.Arg(3)
		mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
		defer mbTrans598.Close()
		_, err599 := mbTrans598.WriteString(arg597)
		if err599 != nil {
			Usage()
			return
		}
		factory600 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt601 := factory600.GetProtocol(mbTrans598)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
		err602 := containerStruct2.ReadField3(jsProt601)
		if err602 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TblTypes
		value2 := argvalue2
		fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg607 := flag.Arg(2)
		mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
		defer mbTrans608.Close()
		_, err609 := mbTrans608.WriteString(arg607)
		if err609 != nil {
			Usage()
			return
		}
		factory610 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt611 := factory610.GetProtocol(mbTrans608)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
		err612 := containerStruct1.ReadField2(jsProt611)
		if err612 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
			flag.Usage()
		}
		arg613 := flag.Arg(1)
		mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
		defer mbTrans614.Close()
		_, err615 := mbTrans614.WriteString(arg613)
		if err615 != nil {
			Usage()
			return
		}
		factory616 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt617 := factory616.GetProtocol(mbTrans614)
		argvalue0 := hive_metastore.NewGetTableRequest()
		err618 := argvalue0.Read(jsProt617)
		if err618 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
			flag.Usage()
		}
		arg619 := flag.Arg(1)
		mbTrans620 := thrift.NewTMemoryBufferLen(len(arg619))
		defer mbTrans620.Close()
		_, err621 := mbTrans620.WriteString(arg619)
		if err621 != nil {
			Usage()
			return
		}
		factory622 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt623 := factory622.GetProtocol(mbTrans620)
		argvalue0 := hive_metastore.NewGetTablesRequest()
		err624 := argvalue0.Read(jsProt623)
		if err624 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err627 := (strconv.Atoi(flag.Arg(3)))
		if err627 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg630 := flag.Arg(3)
		mbTrans631 := thrift.NewTMemoryBufferLen(len(arg630))
		defer mbTrans631.Close()
		_, err632 := mbTrans631.WriteString(arg630)
		if err632 != nil {
			Usage()
			return
		}
		factory633 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt634 := factory633.GetProtocol(mbTrans631)
		argvalue2 := hive_metastore.NewTable()
		err635 := argvalue2.Read(jsProt634)
		if err635 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg638 := flag.Arg(3)
		mbTrans639 := thrift.NewTMemoryBufferLen(len(arg638))
		defer mbTrans639.Close()
		_, err640 := mbTrans639.WriteString(arg638)
		if err640 != nil {
			Usage()
			return
		}
		factory641 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt642 := factory641.GetProtocol(mbTrans639)
		argvalue2 := hive_metastore.NewTable()
		err643 := argvalue2.Read(jsProt642)
		if err643 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg644 := flag.Arg(4)
		mbTrans645 := thrift.NewTMemoryBufferLen(len(arg644))
		defer mbTrans645.Close()
		_, err646 := mbTrans645.WriteString(arg644)
		if err646 != nil {
			Usage()
			return
		}
		factory647 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt648 := factory647.GetProtocol(mbTrans645)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err649 := argvalue3.Read(jsProt648)
		if err649 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_with_cascade":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg652 := flag.Arg(3)
		mbTrans653 := thrift.NewTMemoryBufferLen(len(arg652))
		defer mbTrans653.Close()
		_, err654 := mbTrans653.WriteString(arg652)
		if err654 != nil {
			Usage()
			return
		}
		factory655 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt656 := factory655.GetProtocol(mbTrans653)
		argvalue2 := hive_metastore.NewTable()
		err657 := argvalue2.Read(jsProt656)
		if err657 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg659 := flag.Arg(1)
		mbTrans660 := thrift.NewTMemoryBufferLen(len(arg659))
		defer mbTrans660.Close()
		_, err661 := mbTrans660.WriteString(arg659)
		if err661 != nil {
			Usage()
			return
		}
		factory662 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt663 := factory662.GetProtocol(mbTrans660)
		argvalue0 := hive_metastore.NewPartition()
		err664 := argvalue0.Read(jsProt663)
		if err664 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg665 := flag.Arg(1)
		mbTrans666 := thrift.NewTMemoryBufferLen(len(arg665))
		defer mbTrans666.Close()
		_, err667 := mbTrans666.WriteString(arg665)
		if err667 != nil {
			Usage()
			return
		}
		factory668 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt669 := factory668.GetProtocol(mbTrans666)
		argvalue0 := hive_metastore.NewPartition()
		err670 := argvalue0.Read(jsProt669)
		if err670 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg671 := flag.Arg(2)
		mbTrans672 := thrift.NewTMemoryBufferLen(len(arg671))
		defer mbTrans672.Close()
		_, err673 := mbTrans672.WriteString(arg671)
		if err673 != nil {
			Usage()
			return
		}
		factory674 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt675 := factory674.GetProtocol(mbTrans672)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err676 := argvalue1.Read(jsProt675)
		if err676 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg677 := flag.Arg(1)
		mbTrans678 := thrift.NewTMemoryBufferLen(len(arg677))
		defer mbTrans678.Close()
		_, err679 := mbTrans678.WriteString(arg677)
		if err679 != nil {
			Usage()
			return
		}
		factory680 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt681 := factory680.GetProtocol(mbTrans678)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
		err682 := containerStruct0.ReadField1(jsProt681)
		if err682 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partitions_pspec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
			flag.Usage()
		}
		arg683 := flag.Arg(1)
		mbTrans684 := thrift.NewTMemoryBufferLen(len(arg683))
		defer mbTrans684.Close()
		_, err685 := mbTrans684.WriteString(arg683)
		if err685 != nil {
			Usage()
			return
		}
		factory686 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt687 := factory686.GetProtocol(mbTrans684)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
		err688 := containerStruct0.ReadField1(jsProt687)
		if err688 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg691 := flag.Arg(3)
		mbTrans692 := thrift.NewTMemoryBufferLen(len(arg691))
		defer mbTrans692.Close()
		_, err693 := mbTrans692.WriteString(arg691)
		if err693 != nil {
			Usage()
			return
		}
		factory694 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt695 := factory694.GetProtocol(mbTrans692)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
		err696 := containerStruct2.ReadField3(jsProt695)
		if err696 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg697 := flag.Arg(1)
		mbTrans698 := thrift.NewTMemoryBufferLen(len(arg697))
		defer mbTrans698.Close()
		_, err699 := mbTrans698.WriteString(arg697)
		if err699 != nil {
			Usage()
			return
		}
		factory700 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt701 := factory700.GetProtocol(mbTrans698)
		argvalue0 := hive_metastore.NewAddPartitionsRequest()
		err702 := argvalue0.Read(jsProt701)
		if err702 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg705 := flag.Arg(3)
		mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
		defer mbTrans706.Close()
		_, err707 := mbTrans706.WriteString(arg705)
		if err707 != nil {
			Usage()
			return
		}
		factory708 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt709 := factory708.GetProtocol(mbTrans706)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
		err710 := containerStruct2.ReadField3(jsProt709)
		if err710 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg711 := flag.Arg(4)
		mbTrans712 := thrift.NewTMemoryBufferLen(len(arg711))
		defer mbTrans712.Close()
		_, err713 := mbTrans712.WriteString(arg711)
		if err713 != nil {
			Usage()
			return
		}
		factory714 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt715 := factory714.GetProtocol(mbTrans712)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err716 := argvalue3.Read(jsProt715)
		if err716 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg723 := flag.Arg(4)
		mbTrans724 := thrift.NewTMemoryBufferLen(len(arg723))
		defer mbTrans724.Close()
		_, err725 := mbTrans724.WriteString(arg723)
		if err725 != nil {
			Usage()
			return
		}
		factory726 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt727 := factory726.GetProtocol(mbTrans724)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err728 := argvalue3.Read(jsProt727)
		if err728 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg731 := flag.Arg(3)
		mbTrans732 := thrift.NewTMemoryBufferLen(len(arg731))
		defer mbTrans732.Close()
		_, err733 := mbTrans732.WriteString(arg731)
		if err733 != nil {
			Usage()
			return
		}
		factory734 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt735 := factory734.GetProtocol(mbTrans732)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
		err736 := containerStruct2.ReadField3(jsProt735)
		if err736 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg740 := flag.Arg(3)
		mbTrans741 := thrift.NewTMemoryBufferLen(len(arg740))
		defer mbTrans741.Close()
		_, err742 := mbTrans741.WriteString(arg740)
		if err742 != nil {
			Usage()
			return
		}
		factory743 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt744 := factory743.GetProtocol(mbTrans741)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
		err745 := containerStruct2.ReadField3(jsProt744)
		if err745 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg747 := flag.Arg(5)
		mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
		defer mbTrans748.Close()
		_, err749 := mbTrans748.WriteString(arg747)
		if err749 != nil {
			Usage()
			return
		}
		factory750 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt751 := factory750.GetProtocol(mbTrans748)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err752 := argvalue4.Read(jsProt751)
		if err752 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg761 := flag.Arg(5)
		mbTrans762 := thrift.NewTMemoryBufferLen(len(arg761))
		defer mbTrans762.Close()
		_, err763 := mbTrans762.WriteString(arg761)
		if err763 != nil {
			Usage()
			return
		}
		factory764 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt765 := factory764.GetProtocol(mbTrans762)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err766 := argvalue4.Read(jsProt765)
		if err766 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg767 := flag.Arg(1)
		mbTrans768 := thrift.NewTMemoryBufferLen(len(arg767))
		defer mbTrans768.Close()
		_, err769 := mbTrans768.WriteString(arg767)
		if err769 != nil {
			Usage()
			return
		}
		factory770 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt771 := factory770.GetProtocol(mbTrans768)
		argvalue0 := hive_metastore.NewDropPartitionsRequest()
		err772 := argvalue0.Read(jsProt771)
		if err772 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg775 := flag.Arg(3)
		mbTrans776 := thrift.NewTMemoryBufferLen(len(arg775))
		defer mbTrans776.Close()
		_, err777 := mbTrans776.WriteString(arg775)
		if err777 != nil {
			Usage()
			return
		}
		factory778 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt779 := factory778.GetProtocol(mbTrans776)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
		err780 := containerStruct2.ReadField3(jsProt779)
		if err780 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg781 := flag.Arg(1)
		mbTrans782 := thrift.NewTMemoryBufferLen(len(arg781))
		defer mbTrans782.Close()
		_, err783 := mbTrans782.WriteString(arg781)
		if err783 != nil {
			Usage()
			return
		}
		factory784 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt785 := factory784.GetProtocol(mbTrans782)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
		err786 := containerStruct0.ReadField1(jsProt785)
		if err786 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "exchange_partitions":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
			flag.Usage()
		}
		arg791 := flag.Arg(1)
		mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
		defer mbTrans792.Close()
		_, err793 := mbTrans792.WriteString(arg791)
		if err793 != nil {
			Usage()
			return
		}
		factory794 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt795 := factory794.GetProtocol(mbTrans792)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
		err796 := containerStruct0.ReadField1(jsProt795)
		if err796 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg803 := flag.Arg(3)
		mbTrans804 := thrift.NewTMemoryBufferLen(len(arg803))
		defer mbTrans804.Close()
		_, err805 := mbTrans804.WriteString(arg803)
		if err805 != nil {
			Usage()
			return
		}
		factory806 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt807 := factory806.GetProtocol(mbTrans804)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err808 := containerStruct2.ReadField3(jsProt807)
		if err808 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg810 := flag.Arg(5)
		mbTrans811 := thrift.NewTMemoryBufferLen(len(arg810))
		defer mbTrans811.Close()
		_, err812 := mbTrans811.WriteString(arg810)
		if err812 != nil {
			Usage()
			return
		}
		factory813 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt814 := factory813.GetProtocol(mbTrans811)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err815 := containerStruct4.ReadField5(jsProt814)
		if err815 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err821 := (strconv.Atoi(flag.Arg(3)))
		if err821 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err824 := (strconv.Atoi(flag.Arg(3)))
		if err824 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg826 := flag.Arg(5)
		mbTrans827 := thrift.NewTMemoryBufferLen(len(arg826))
		defer mbTrans827.Close()
		_, err828 := mbTrans827.WriteString(arg826)
		if err828 != nil {
			Usage()
			return
		}
		factory829 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt830 := factory829.GetProtocol(mbTrans827)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
		err831 := containerStruct4.ReadField5(jsProt830)
		if err831 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partitions_pspec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err834 := (strconv.Atoi(flag.Arg(3)))
		if err834 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err837 := (strconv.Atoi(flag.Arg(3)))
		if err837 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg840 := flag.Arg(3)
		mbTrans841 := thrift.NewTMemoryBufferLen(len(arg840))
		defer mbTrans841.Close()
		_, err842 := mbTrans841.WriteString(arg840)
		if err842 != nil {
			Usage()
			return
		}
		factory843 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt844 := factory843.GetProtocol(mbTrans841)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
		err845 := containerStruct2.ReadField3(jsProt844)
		if err845 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err846 := (strconv.Atoi(flag.Arg(4)))
		if err846 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg849 := flag.Arg(3)
		mbTrans850 := thrift.NewTMemoryBufferLen(len(arg849))
		defer mbTrans850.Close()
		_, err851 := mbTrans850.WriteString(arg849)
		if err851 != nil {
			Usage()
			return
		}
		factory852 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt853 := factory852.GetProtocol(mbTrans850)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err854 := containerStruct2.ReadField3(jsProt853)
		if err854 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err855 := (strconv.Atoi(flag.Arg(4)))
		if err855 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg857 := flag.Arg(6)
		mbTrans858 := thrift.NewTMemoryBufferLen(len(arg857))
		defer mbTrans858.Close()
		_, err859 := mbTrans858.WriteString(arg857)
		if err859 != nil {
			Usage()
			return
		}
		factory860 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt861 := factory860.GetProtocol(mbTrans858)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err862 := containerStruct5.ReadField6(jsProt861)
		if err862 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg865 := flag.Arg(3)
		mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
		defer mbTrans866.Close()
		_, err867 := mbTrans866.WriteString(arg865)
		if err867 != nil {
			Usage()
			return
		}
		factory868 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt869 := factory868.GetProtocol(mbTrans866)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
		err870 := containerStruct2.ReadField3(jsProt869)
		if err870 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err871 := (strconv.Atoi(flag.Arg(4)))
		if err871 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err875 := (strconv.Atoi(flag.Arg(4)))
		if err875 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_part_specs_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err879 := (strconv.Atoi(flag.Arg(4)))
		if err879 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg880 := flag.Arg(1)
		mbTrans881 := thrift.NewTMemoryBufferLen(len(arg880))
		defer mbTrans881.Close()
		_, err882 := mbTrans881.WriteString(arg880)
		if err882 != nil {
			Usage()
			return
		}
		factory883 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt884 := factory883.GetProtocol(mbTrans881)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err885 := argvalue0.Read(jsProt884)
		if err885 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_num_partitions_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg891 := flag.Arg(3)
		mbTrans892 := thrift.NewTMemoryBufferLen(len(arg891))
		defer mbTrans892.Close()
		_, err893 := mbTrans892.WriteString(arg891)
		if err893 != nil {
			Usage()
			return
		}
		factory894 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt895 := factory894.GetProtocol(mbTrans892)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
		err896 := containerStruct2.ReadField3(jsProt895)
		if err896 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg899 := flag.Arg(3)
		mbTrans900 := thrift.NewTMemoryBufferLen(len(arg899))
		defer mbTrans900.Close()
		_, err901 := mbTrans900.WriteString(arg899)
		if err901 != nil {
			Usage()
			return
		}
		factory902 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt903 := factory902.GetProtocol(mbTrans900)
		argvalue2 := hive_metastore.NewPartition()
		err904 := argvalue2.Read(jsProt903)
		if err904 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg907 := flag.Arg(3)
		mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
		defer mbTrans908.Close()
		_, err909 := mbTrans908.WriteString(arg907)
		if err909 != nil {
			Usage()
			return
		}
		factory910 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt911 := factory910.GetProtocol(mbTrans908)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
		err912 := containerStruct2.ReadField3(jsProt911)
		if err912 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg915 := flag.Arg(3)
		mbTrans916 := thrift.NewTMemoryBufferLen(len(arg915))
		defer mbTrans916.Close()
		_, err917 := mbTrans916.WriteString(arg915)
		if err917 != nil {
			Usage()
			return
		}
		factory918 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt919 := factory918.GetProtocol(mbTrans916)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
		err920 := containerStruct2.ReadField3(jsProt919)
		if err920 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		arg921 := flag.Arg(4)
		mbTrans922 := thrift.NewTMemoryBufferLen(len(arg921))
		defer mbTrans922.Close()
		_, err923 := mbTrans922.WriteString(arg921)
		if err923 != nil {
			Usage()
			return
		}
		factory924 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt925 := factory924.GetProtocol(mbTrans922)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err926 := argvalue3.Read(jsProt925)
		if err926 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg929 := flag.Arg(3)
		mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
		defer mbTrans930.Close()
		_, err931 := mbTrans930.WriteString(arg929)
		if err931 != nil {
			Usage()
			return
		}
		factory932 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt933 := factory932.GetProtocol(mbTrans930)
		argvalue2 := hive_metastore.NewPartition()
		err934 := argvalue2.Read(jsProt933)
		if err934 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg935 := flag.Arg(4)
		mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
		defer mbTrans936.Close()
		_, err937 := mbTrans936.WriteString(arg935)
		if err937 != nil {
			Usage()
			return
		}
		factory938 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt939 := factory938.GetProtocol(mbTrans936)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err940 := argvalue3.Read(jsProt939)
		if err940 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg943 := flag.Arg(3)
		mbTrans944 := thrift.NewTMemoryBufferLen(len(arg943))
		defer mbTrans944.Close()
		_, err945 := mbTrans944.WriteString(arg943)
		if err945 != nil {
			Usage()
			return
		}
		factory946 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt947 := factory946.GetProtocol(mbTrans944)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
		err948 := containerStruct2.ReadField3(jsProt947)
		if err948 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg949 := flag.Arg(4)
		mbTrans950 := thrift.NewTMemoryBufferLen(len(arg949))
		defer mbTrans950.Close()
		_, err951 := mbTrans950.WriteString(arg949)
		if err951 != nil {
			Usage()
			return
		}
		factory952 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt953 := factory952.GetProtocol(mbTrans950)
		argvalue3 := hive_metastore.NewPartition()
		err954 := argvalue3.Read(jsProt953)
		if err954 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg955 := flag.Arg(1)
		mbTrans956 := thrift.NewTMemoryBufferLen(len(arg955))
		defer mbTrans956.Close()
		_, err957 := mbTrans956.WriteString(arg955)
		if err957 != nil {
			Usage()
			return
		}
		factory958 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt959 := factory958.GetProtocol(mbTrans956)
		containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
		err960 := containerStruct0.ReadField1(jsProt959)
		if err960 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg968 := flag.Arg(3)
		mbTrans969 := thrift.NewTMemoryBufferLen(len(arg968))
		defer mbTrans969.Close()
		_, err970 := mbTrans969.WriteString(arg968)
		if err970 != nil {
			Usage()
			return
		}
		factory971 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt972 := factory971.GetProtocol(mbTrans969)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
		err973 := containerStruct2.ReadField3(jsProt972)
		if err973 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg976 := flag.Arg(3)
		mbTrans977 := thrift.NewTMemoryBufferLen(len(arg976))
		defer mbTrans977.Close()
		_, err978 := mbTrans977.WriteString(arg976)
		if err978 != nil {
			Usage()
			return
		}
		factory979 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt980 := factory979.GetProtocol(mbTrans977)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
		err981 := containerStruct2.ReadField3(jsProt980)
		if err981 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_index":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
			flag.Usage()
		}
		arg982 := flag.Arg(1)
		mbTrans983 := thrift.NewTMemoryBufferLen(len(arg982))
		defer mbTrans983.Close()
		_, err984 := mbTrans983.WriteString(arg982)
		if err984 != nil {
			Usage()
			return
		}
		factory985 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt986 := factory985.GetProtocol(mbTrans983)
		argvalue0 := hive_metastore.NewIndex()
		err987 := argvalue0.Read(jsProt986)
		if err987 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg988 := flag.Arg(2)
		mbTrans989 := thrift.NewTMemoryBufferLen(len(arg988))
		defer mbTrans989.Close()
		_, err990 := mbTrans989.WriteString(arg988)
		if err990 != nil {
			Usage()
			return
		}
		factory991 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt992 := factory991.GetProtocol(mbTrans989)
		argvalue1 := hive_metastore.NewTable()
		err993 := argvalue1.Read(jsProt992)
		if err993 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddIndex(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_index":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg997 := flag.Arg(4)
		mbTrans998 := thrift.NewTMemoryBufferLen(len(arg997))
		defer mbTrans998.Close()
		_, err999 := mbTrans998.WriteString(arg997)
		if err999 != nil {
			Usage()
			return
		}
		factory1000 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1001 := factory1000.GetProtocol(mbTrans998)
		argvalue3 := hive_metastore.NewIndex()
		err1002 := argvalue3.Read(jsProt1001)
		if err1002 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_index_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_index_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_indexes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1012 := (strconv.Atoi(flag.Arg(3)))
		if err1012 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_index_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1015 := (strconv.Atoi(flag.Arg(3)))
		if err1015 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_primary_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
			flag.Usage()
		}
		arg1016 := flag.Arg(1)
		mbTrans1017 := thrift.NewTMemoryBufferLen(len(arg1016))
		defer mbTrans1017.Close()
		_, err1018 := mbTrans1017.WriteString(arg1016)
		if err1018 != nil {
			Usage()
			return
		}
		factory1019 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1020 := factory1019.GetProtocol(mbTrans1017)
		argvalue0 := hive_metastore.NewPrimaryKeysRequest()
		err1021 := argvalue0.Read(jsProt1020)
		if err1021 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_foreign_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
			flag.Usage()
		}
		arg1022 := flag.Arg(1)
		mbTrans1023 := thrift.NewTMemoryBufferLen(len(arg1022))
		defer mbTrans1023.Close()
		_, err1024 := mbTrans1023.WriteString(arg1022)
		if err1024 != nil {
			Usage()
			return
		}
		factory1025 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1026 := factory1025.GetProtocol(mbTrans1023)
		argvalue0 := hive_metastore.NewForeignKeysRequest()
		err1027 := argvalue0.Read(jsProt1026)
		if err1027 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetForeignKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1028 := flag.Arg(1)
		mbTrans1029 := thrift.NewTMemoryBufferLen(len(arg1028))
		defer mbTrans1029.Close()
		_, err1030 := mbTrans1029.WriteString(arg1028)
		if err1030 != nil {
			Usage()
			return
		}
		factory1031 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1032 := factory1031.GetProtocol(mbTrans1029)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1033 := argvalue0.Read(jsProt1032)
		if err1033 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1034 := flag.Arg(1)
		mbTrans1035 := thrift.NewTMemoryBufferLen(len(arg1034))
		defer mbTrans1035.Close()
		_, err1036 := mbTrans1035.WriteString(arg1034)
		if err1036 != nil {
			Usage()
			return
		}
		factory1037 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1038 := factory1037.GetProtocol(mbTrans1035)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1039 := argvalue0.Read(jsProt1038)
		if err1039 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1047 := flag.Arg(1)
		mbTrans1048 := thrift.NewTMemoryBufferLen(len(arg1047))
		defer mbTrans1048.Close()
		_, err1049 := mbTrans1048.WriteString(arg1047)
		if err1049 != nil {
			Usage()
			return
		}
		factory1050 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1051 := factory1050.GetProtocol(mbTrans1048)
		argvalue0 := hive_metastore.NewTableStatsRequest()
		err1052 := argvalue0.Read(jsProt1051)
		if err1052 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1053 := flag.Arg(1)
		mbTrans1054 := thrift.NewTMemoryBufferLen(len(arg1053))
		defer mbTrans1054.Close()
		_, err1055 := mbTrans1054.WriteString(arg1053)
		if err1055 != nil {
			Usage()
			return
		}
		factory1056 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1057 := factory1056.GetProtocol(mbTrans1054)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1058 := argvalue0.Read(jsProt1057)
		if err1058 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1059 := flag.Arg(1)
		mbTrans1060 := thrift.NewTMemoryBufferLen(len(arg1059))
		defer mbTrans1060.Close()
		_, err1061 := mbTrans1060.WriteString(arg1059)
		if err1061 != nil {
			Usage()
			return
		}
		factory1062 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1063 := factory1062.GetProtocol(mbTrans1060)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1064 := argvalue0.Read(jsProt1063)
		if err1064 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1065 := flag.Arg(1)
		mbTrans1066 := thrift.NewTMemoryBufferLen(len(arg1065))
		defer mbTrans1066.Close()
		_, err1067 := mbTrans1066.WriteString(arg1065)
		if err1067 != nil {
			Usage()
			return
		}
		factory1068 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1069 := factory1068.GetProtocol(mbTrans1066)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1070 := argvalue0.Read(jsProt1069)
		if err1070 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg1078 := flag.Arg(1)
		mbTrans1079 := thrift.NewTMemoryBufferLen(len(arg1078))
		defer mbTrans1079.Close()
		_, err1080 := mbTrans1079.WriteString(arg1078)
		if err1080 != nil {
			Usage()
			return
		}
		factory1081 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1082 := factory1081.GetProtocol(mbTrans1079)
		argvalue0 := hive_metastore.NewFunction()
		err1083 := argvalue0.Read(jsProt1082)
		if err1083 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1088 := flag.Arg(3)
		mbTrans1089 := thrift.NewTMemoryBufferLen(len(arg1088))
		defer mbTrans1089.Close()
		_, err1090 := mbTrans1089.WriteString(arg1088)
		if err1090 != nil {
			Usage()
			return
		}
		factory1091 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1092 := factory1091.GetProtocol(mbTrans1089)
		argvalue2 := hive_metastore.NewFunction()
		err1093 := argvalue2.Read(jsProt1092)
		if err1093 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_all_functions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllFunctions(context.Background()))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg1098 := flag.Arg(1)
		mbTrans1099 := thrift.NewTMemoryBufferLen(len(arg1098))
		defer mbTrans1099.Close()
		_, err1100 := mbTrans1099.WriteString(arg1098)
		if err1100 != nil {
			Usage()
			return
		}
		factory1101 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1102 := factory1101.GetProtocol(mbTrans1099)
		argvalue0 := hive_metastore.NewRole()
		err1103 := argvalue0.Read(jsProt1102)
		if err1103 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames(context.Background()))
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "grant_revoke_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
			flag.Usage()
		}
		arg1112 := flag.Arg(1)
		mbTrans1113 := thrift.NewTMemoryBufferLen(len(arg1112))
		defer mbTrans1113.Close()
		_, err1114 := mbTrans1113.WriteString(arg1112)
		if err1114 != nil {
			Usage()
			return
		}
		factory1115 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1116 := factory1115.GetProtocol(mbTrans1113)
		argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
		err1117 := argvalue0.Read(jsProt1116)
		if err1117 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokeRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg1118 := flag.Arg(1)
		mbTrans1119 := thrift.NewTMemoryBufferLen(len(arg1118))
		defer mbTrans1119.Close()
		_, err1120 := mbTrans1119.WriteString(arg1118)
		if err1120 != nil {
			Usage()
			return
		}
		factory1121 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1122 := factory1121.GetProtocol(mbTrans1119)
		argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
		err1123 := argvalue0.Read(jsProt1122)
		if err1123 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg1124 := flag.Arg(1)
		mbTrans1125 := thrift.NewTMemoryBufferLen(len(arg1124))
		defer mbTrans1125.Close()
		_, err1126 := mbTrans1125.WriteString(arg1124)
		if err1126 != nil {
			Usage()
			return
		}
		factory1127 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1128 := factory1127.GetProtocol(mbTrans1125)
		argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
		err1129 := argvalue0.Read(jsProt1128)
		if err1129 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg1130 := flag.Arg(1)
		mbTrans1131 := thrift.NewTMemoryBufferLen(len(arg1130))
		defer mbTrans1131.Close()
		_, err1132 := mbTrans1131.WriteString(arg1130)
		if err1132 != nil {
			Usage()
			return
		}
		factory1133 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1134 := factory1133.GetProtocol(mbTrans1131)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1135 := argvalue0.Read(jsProt1134)
		if err1135 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1137 := flag.Arg(3)
		mbTrans1138 := thrift.NewTMemoryBufferLen(len(arg1137))
		defer mbTrans1138.Close()
		_, err1139 := mbTrans1138.WriteString(arg1137)
		if err1139 != nil {
			Usage()
			return
		}
		factory1140 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1141 := factory1140.GetProtocol(mbTrans1138)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
		err1142 := containerStruct2.ReadField3(jsProt1141)
		if err1142 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg1144 := flag.Arg(3)
		mbTrans1145 := thrift.NewTMemoryBufferLen(len(arg1144))
		defer mbTrans1145.Close()
		_, err1146 := mbTrans1145.WriteString(arg1144)
		if err1146 != nil {
			Usage()
			return
		}
		factory1147 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1148 := factory1147.GetProtocol(mbTrans1145)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err1149 := argvalue2.Read(jsProt1148)
		if err1149 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg1150 := flag.Arg(1)
		mbTrans1151 := thrift.NewTMemoryBufferLen(len(arg1150))
		defer mbTrans1151.Close()
		_, err1152 := mbTrans1151.WriteString(arg1150)
		if err1152 != nil {
			Usage()
			return
		}
		factory1153 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1154 := factory1153.GetProtocol(mbTrans1151)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1155 := argvalue0.Read(jsProt1154)
		if err1155 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1156 := flag.Arg(1)
		mbTrans1157 := thrift.NewTMemoryBufferLen(len(arg1156))
		defer mbTrans1157.Close()
		_, err1158 := mbTrans1157.WriteString(arg1156)
		if err1158 != nil {
			Usage()
			return
		}
		factory1159 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1160 := factory1159.GetProtocol(mbTrans1157)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1161 := argvalue0.Read(jsProt1160)
		if err1161 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "grant_revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1162 := flag.Arg(1)
		mbTrans1163 := thrift.NewTMemoryBufferLen(len(arg1162))
		defer mbTrans1163.Close()
		_, err1164 := mbTrans1163.WriteString(arg1162)
		if err1164 != nil {
			Usage()
			return
		}
		factory1165 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1166 := factory1165.GetProtocol(mbTrans1163)
		argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1167 := argvalue0.Read(jsProt1166)
		if err1167 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1169 := flag.Arg(2)
		mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
		defer mbTrans1170.Close()
		_, err1171 := mbTrans1170.WriteString(arg1169)
		if err1171 != nil {
			Usage()
			return
		}
		factory1172 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1173 := factory1172.GetProtocol(mbTrans1170)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
		err1174 := containerStruct1.ReadField2(jsProt1173)
		if err1174 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_token_identifiers":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
		fmt.Print("\n")
		break
	case "add_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_master_key":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
			flag.Usage()
		}
		tmp0, err1184 := (strconv.Atoi(flag.Arg(1)))
		if err1184 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
			flag.Usage()
		}
		tmp0, err1186 := (strconv.Atoi(flag.Arg(1)))
		if err1186 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.RemoveMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_master_keys":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMasterKeys(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo(context.Background()))
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg1187 := flag.Arg(1)
		mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
		defer mbTrans1188.Close()
		_, err1189 := mbTrans1188.WriteString(arg1187)
		if err1189 != nil {
			Usage()
			return
		}
		factory1190 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1191 := factory1190.GetProtocol(mbTrans1188)
		argvalue0 := hive_metastore.NewOpenTxnRequest()
		err1192 := argvalue0.Read(jsProt1191)
		if err1192 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg1193 := flag.Arg(1)
		mbTrans1194 := thrift.NewTMemoryBufferLen(len(arg1193))
		defer mbTrans1194.Close()
		_, err1195 := mbTrans1194.WriteString(arg1193)
		if err1195 != nil {
			Usage()
			return
		}
		factory1196 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1197 := factory1196.GetProtocol(mbTrans1194)
		argvalue0 := hive_metastore.NewAbortTxnRequest()
		err1198 := argvalue0.Read(jsProt1197)
		if err1198 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
			flag.Usage()
		}
		arg1199 := flag.Arg(1)
		mbTrans1200 := thrift.NewTMemoryBufferLen(len(arg1199))
		defer mbTrans1200.Close()
		_, err1201 := mbTrans1200.WriteString(arg1199)
		if err1201 != nil {
			Usage()
			return
		}
		factory1202 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1203 := factory1202.GetProtocol(mbTrans1200)
		argvalue0 := hive_metastore.NewAbortTxnsRequest()
		err1204 := argvalue0.Read(jsProt1203)
		if err1204 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg1205 := flag.Arg(1)
		mbTrans1206 := thrift.NewTMemoryBufferLen(len(arg1205))
		defer mbTrans1206.Close()
		_, err1207 := mbTrans1206.WriteString(arg1205)
		if err1207 != nil {
			Usage()
			return
		}
		factory1208 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1209 := factory1208.GetProtocol(mbTrans1206)
		argvalue0 := hive_metastore.NewCommitTxnRequest()
		err1210 := argvalue0.Read(jsProt1209)
		if err1210 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg1211 := flag.Arg(1)
		mbTrans1212 := thrift.NewTMemoryBufferLen(len(arg1211))
		defer mbTrans1212.Close()
		_, err1213 := mbTrans1212.WriteString(arg1211)
		if err1213 != nil {
			Usage()
			return
		}
		factory1214 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1215 := factory1214.GetProtocol(mbTrans1212)
		argvalue0 := hive_metastore.NewLockRequest()
		err1216 := argvalue0.Read(jsProt1215)
		if err1216 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg1217 := flag.Arg(1)
		mbTrans1218 := thrift.NewTMemoryBufferLen(len(arg1217))
		defer mbTrans1218.Close()
		_, err1219 := mbTrans1218.WriteString(arg1217)
		if err1219 != nil {
			Usage()
			return
		}
		factory1220 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1221 := factory1220.GetProtocol(mbTrans1218)
		argvalue0 := hive_metastore.NewCheckLockRequest()
		err1222 := argvalue0.Read(jsProt1221)
		if err1222 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg1223 := flag.Arg(1)
		mbTrans1224 := thrift.NewTMemoryBufferLen(len(arg1223))
		defer mbTrans1224.Close()
		_, err1225 := mbTrans1224.WriteString(arg1223)
		if err1225 != nil {
			Usage()
			return
		}
		factory1226 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1227 := factory1226.GetProtocol(mbTrans1224)
		argvalue0 := hive_metastore.NewUnlockRequest()
		err1228 := argvalue0.Read(jsProt1227)
		if err1228 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg1229 := flag.Arg(1)
		mbTrans1230 := thrift.NewTMemoryBufferLen(len(arg1229))
		defer mbTrans1230.Close()
		_, err1231 := mbTrans1230.WriteString(arg1229)
		if err1231 != nil {
			Usage()
			return
		}
		factory1232 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1233 := factory1232.GetProtocol(mbTrans1230)
		argvalue0 := hive_metastore.NewShowLocksRequest()
		err1234 := argvalue0.Read(jsProt1233)
		if err1234 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg1235 := flag.Arg(1)
		mbTrans1236 := thrift.NewTMemoryBufferLen(len(arg1235))
		defer mbTrans1236.Close()
		_, err1237 := mbTrans1236.WriteString(arg1235)
		if err1237 != nil {
			Usage()
			return
		}
		factory1238 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1239 := factory1238.GetProtocol(mbTrans1236)
		argvalue0 := hive_metastore.NewHeartbeatRequest()
		err1240 := argvalue0.Read(jsProt1239)
		if err1240 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg1241 := flag.Arg(1)
		mbTrans1242 := thrift.NewTMemoryBufferLen(len(arg1241))
		defer mbTrans1242.Close()
		_, err1243 := mbTrans1242.WriteString(arg1241)
		if err1243 != nil {
			Usage()
			return
		}
		factory1244 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1245 := factory1244.GetProtocol(mbTrans1242)
		argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
		err1246 := argvalue0.Read(jsProt1245)
		if err1246 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg1247 := flag.Arg(1)
		mbTrans1248 := thrift.NewTMemoryBufferLen(len(arg1247))
		defer mbTrans1248.Close()
		_, err1249 := mbTrans1248.WriteString(arg1247)
		if err1249 != nil {
			Usage()
			return
		}
		factory1250 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1251 := factory1250.GetProtocol(mbTrans1248)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1252 := argvalue0.Read(jsProt1251)
		if err1252 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
			flag.Usage()
		}
		arg1253 := flag.Arg(1)
		mbTrans1254 := thrift.NewTMemoryBufferLen(len(arg1253))
		defer mbTrans1254.Close()
		_, err1255 := mbTrans1254.WriteString(arg1253)
		if err1255 != nil {
			Usage()
			return
		}
		factory1256 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1257 := factory1256.GetProtocol(mbTrans1254)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1258 := argvalue0.Read(jsProt1257)
		if err1258 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg1259 := flag.Arg(1)
		mbTrans1260 := thrift.NewTMemoryBufferLen(len(arg1259))
		defer mbTrans1260.Close()
		_, err1261 := mbTrans1260.WriteString(arg1259)
		if err1261 != nil {
			Usage()
			return
		}
		factory1262 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1263 := factory1262.GetProtocol(mbTrans1260)
		argvalue0 := hive_metastore.NewShowCompactRequest()
		err1264 := argvalue0.Read(jsProt1263)
		if err1264 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_dynamic_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
			flag.Usage()
		}
		arg1265 := flag.Arg(1)
		mbTrans1266 := thrift.NewTMemoryBufferLen(len(arg1265))
		defer mbTrans1266.Close()
		_, err1267 := mbTrans1266.WriteString(arg1265)
		if err1267 != nil {
			Usage()
			return
		}
		factory1268 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1269 := factory1268.GetProtocol(mbTrans1266)
		argvalue0 := hive_metastore.NewAddDynamicPartitions()
		err1270 := argvalue0.Read(jsProt1269)
		if err1270 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_next_notification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
			flag.Usage()
		}
		arg1271 := flag.Arg(1)
		mbTrans1272 := thrift.NewTMemoryBufferLen(len(arg1271))
		defer mbTrans1272.Close()
		_, err1273 := mbTrans1272.WriteString(arg1271)
		if err1273 != nil {
			Usage()
			return
		}
		factory1274 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1275 := factory1274.GetProtocol(mbTrans1272)
		argvalue0 := hive_metastore.NewNotificationEventRequest()
		err1276 := argvalue0.Read(jsProt1275)
		if err1276 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNextNotification(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_current_notificationEventId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
		fmt.Print("\n")
		break
	case "fire_listener_event":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
			flag.Usage()
		}
		arg1277 := flag.Arg(1)
		mbTrans1278 := thrift.NewTMemoryBufferLen(len(arg1277))
		defer mbTrans1278.Close()
		_, err1279 := mbTrans1278.WriteString(arg1277)
		if err1279 != nil {
			Usage()
			return
		}
		factory1280 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1281 := factory1280.GetProtocol(mbTrans1278)
		argvalue0 := hive_metastore.NewFireEventRequest()
		err1282 := argvalue0.Read(jsProt1281)
		if err1282 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FireListenerEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "flushCache":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FlushCache(context.Background()))
		fmt.Print("\n")
		break
	case "get_file_metadata_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
			flag.Usage()
		}
		arg1283 := flag.Arg(1)
		mbTrans1284 := thrift.NewTMemoryBufferLen(len(arg1283))
		defer mbTrans1284.Close()
		_, err1285 := mbTrans1284.WriteString(arg1283)
		if err1285 != nil {
			Usage()
			return
		}
		factory1286 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1287 := factory1286.GetProtocol(mbTrans1284)
		argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
		err1288 := argvalue0.Read(jsProt1287)
		if err1288 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1289 := flag.Arg(1)
		mbTrans1290 := thrift.NewTMemoryBufferLen(len(arg1289))
		defer mbTrans1290.Close()
		_, err1291 := mbTrans1290.WriteString(arg1289)
		if err1291 != nil {
			Usage()
			return
		}
		factory1292 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1293 := factory1292.GetProtocol(mbTrans1290)
		argvalue0 := hive_metastore.NewGetFileMetadataRequest()
		err1294 := argvalue0.Read(jsProt1293)
		if err1294 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "put_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1295 := flag.Arg(1)
		mbTrans1296 := thrift.NewTMemoryBufferLen(len(arg1295))
		defer mbTrans1296.Close()
		_, err1297 := mbTrans1296.WriteString(arg1295)
		if err1297 != nil {
			Usage()
			return
		}
		factory1298 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1299 := factory1298.GetProtocol(mbTrans1296)
		argvalue0 := hive_metastore.NewPutFileMetadataRequest()
		err1300 := argvalue0.Read(jsProt1299)
		if err1300 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "clear_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1301 := flag.Arg(1)
		mbTrans1302 := thrift.NewTMemoryBufferLen(len(arg1301))
		defer mbTrans1302.Close()
		_, err1303 := mbTrans1302.WriteString(arg1301)
		if err1303 != nil {
			Usage()
			return
		}
		factory1304 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1305 := factory1304.GetProtocol(mbTrans1302)
		argvalue0 := hive_metastore.NewClearFileMetadataRequest()
		err1306 := argvalue0.Read(jsProt1305)
		if err1306 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ClearFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cache_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1307 := flag.Arg(1)
		mbTrans1308 := thrift.NewTMemoryBufferLen(len(arg1307))
		defer mbTrans1308.Close()
		_, err1309 := mbTrans1308.WriteString(arg1307)
		if err1309 != nil {
			Usage()
			return
		}
		factory1310 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1311 := factory1310.GetProtocol(mbTrans1308)
		argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
		err1312 := argvalue0.Read(jsProt1311)
		if err1312 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CacheFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName(context.Background()))
		fmt.Print("\n")
		break
	case "getVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetVersion(context.Background()))
		fmt.Print("\n")
		break
	case "getStatus":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatus(context.Background()))
		fmt.Print("\n")
		break
	case "getStatusDetails":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatusDetails(context.Background()))
		fmt.Print("\n")
		break
	case "getCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounters(context.Background()))
		fmt.Print("\n")
		break
	case "getCounter":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCounter(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setOption":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetOption(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getOption":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetOption(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getOptions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOptions(context.Background()))
		fmt.Print("\n")
		break
	case "getCpuProfile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
			flag.Usage()
		}
		tmp0, err1317 := (strconv.Atoi(flag.Arg(1)))
		if err1317 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetCpuProfile(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince(context.Background()))
		fmt.Print("\n")
		break
	case "reinitialize":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Reinitialize(context.Background()))
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown(context.Background()))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
